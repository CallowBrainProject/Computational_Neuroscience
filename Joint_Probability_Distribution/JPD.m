%% Problem Set #4 Joint probability distribution
%% Part 1A
clear all
close all
load("PCAdata.mat")
figure
subplot(2,1,1)
hist(Xdata1(:,1))
ylabel('count')
xlabel('Dimension 1')
subplot(2,1,2)
hist(Xdata1(:,2))
ylabel('count')
xlabel('Dimension 2')

var(Xdata1(:,1))
var(Xdata1(:,2))

%% Part 1B
[coef1,score1,latent1]=pca(Xdata1);
figure
scatter(Xdata1(:,1),Xdata1(:,2))
ylabel('Dimension 1')
xlabel('Dimension 2')
hold on
pc1=coef1(:,1)*sqrt(latent1(1));
plot([0, pc1(1)], [0, pc1(2)], 'LineWidth', 2)
axis square
axis([-6 6 -6 6])
hold on
pc2=coef1(:,2)*sqrt(latent1(2));
plot([0, pc2(1)], [0, pc2(2)], 'LineWidth', 2)
axis square
axis([-6 6 -6 6])

%% Part 1C
Xdat_proj_pc1 =Xdata1*coef1(:,1);

Xdat_proj_pc2 = Xdata1*coef1(:,2);
figure
hist(Xdat_proj_pc1)
ylabel('count')
xlabel('Projected data')

figure
hist(Xdat_proj_pc2)
ylabel('count')
xlabel('Projected data')

std_pc1 = std(Xdat_proj_pc1);

std_pc2 = std(Xdat_proj_pc2);

%% Part 1D

[coef2,score2,latent2]=pca(Xdata2);

%most of variance explained by first two PC so look at variance against
%eigenvalues for just these two

Xdat_proj_pc1 =Xdata2*coef2(:,1);

Xdat_proj_pc2 = Xdata2*coef2(:,2);

std_pc1 = std(Xdat_proj_pc1);

std_pc2 = std(Xdat_proj_pc2);
xdat2_var = []

xdat_proj_var1=[var(Xdat_proj_pc1)];
xdat_proj_var2=[var(Xdat_proj_pc2)];
%The variance along each dimesnion from the data is equal to the
%eigenvalues (latent) generated by the PCA function.    

%% Part 1E
scatter(Xdat_proj_pc1,Xdat_proj_pc2)
ylabel('Projected Dimenison 1')
xlabel('Projected Dimenison 2')

%It was not possible to see the hidden structure because the data is
%origionally in 10 dimensional space. With PCA we can get it along 2
%dimensions which is much easier to visualize.

%% Part 2A
jpd=zeros(2,5);
jpd(2,:)=1
jpd(:,1)=.5
z=sum(jpd,'all')


%% Part 2B
figure
imagesc(jpd) 
colorbar
ylabel('Spike')
xlabel('Stimuli')
%% Part 2C
% A spike provides more information because if a spike occurs we know that
% the stimulus was 1. However, if there is no spike we cannot determine
% what type of stimulus was presented.
%% Part 3A
thetas = 0:1:360;   % range of orientations
r0 = 10; rmax = 40;  % minimum and maximum firing rates
rs = [1:1:80];      % range of possible firing rate responses
theta0 = 180;        % preferred orientation
sigma = 30;         % deviation
f = r0 + rmax * exp( -(thetas-theta0).^2/(2*sigma^2) ); % tuning curve

% plot the conditional distributions p(r|s) for two stimuli: 
% theta = 40, theta = 140, and theta = 180.
theta = 40
f40 = r0 + rmax * exp( -(theta-theta0).^2/(2*sigma^2) );
d40 = exp(-(f40-rs).^2/(2*f40) );
d40 = d40./sum(d40);
figure
plot(d40) %distribution of 40
hold on
theta = 140
f140 = r0 + rmax * exp( -(theta-theta0).^2/(2*sigma^2) );
d140 = exp(-(f140-rs).^2/(2*f140));
d140 = d140./sum(d140);
plot(d140) %distribution of 140
hold on

theta = 180
f180 = r0 + rmax * exp( -(theta-theta0).^2/(2*sigma^2) );
d180 = exp(-(f180-rs).^2/(2*f180));
d180 = d180./sum(d180);

plot(d180) %distribution of 180

ylabel('Probability')
xlabel('Firing Rate')
%% Part3B
data = zeros(180,80);

for t=1:1:180 % Orientations
    ft = r0 + rmax * exp(-((t*2)-theta0).^2/(2*sigma^2)); % firing rate based on each orientation
    x(t)=ft;
    sigmat=sqrt(ft); %Standard deviation of each firing rate based on mean
    data(t,:) = exp(-(ft-rs).^2/(2*ft)); % add guassian distribution of firing rate for each orientation
    datanorm(t,:)=data(t,:)./sum(data(t,:));
end
jpd = datanorm./sum(datanorm,'all'); % The Joint probability distribution
figure 
imagesc(jpd) 
colorbar
ylabel('Orientation')
xlabel('Firing Rate')

%% Part 3C
% Sum over all stimuli
distribution=sum(jpd(:,:));
figure
plot(distribution)
xlabel('firing rate')
ylabel('probability')

%% Part 3D

% plot the conditional distributions p(s|r) for four firing rates: 
% 60 spikes, 50 spikes, 25 spikes, and 10 spikes.
s60 = jpd(:,60);
plot(s60) %distribution of 60 spikes
hold on

s50 = jpd(:,50);
plot(s50) %distribution of 50 spikes
hold on

s25 = jpd(:,25);
plot(s25) % distribution of 25 spikes

hold on

s10 = jpd(:,10);
plot(s10) %distribution of 10 spikes

legend('60 spikes', '50 spikes', '25 spikes', '10 spikes')
xlabel('Orientation')
ylabel('Probability')

%It would appear that 25 spike firing rate would be the best at determining
%the stimuli because the probability distributions are the narrowest,
%indicating that this firing rate would be most specific to the stimuli
%that it prefers. The 10 spike firing rate
%% Part 4A
figure
plot(jpd(69,:))
hold on
plot(jpd(71,:))
legend('138 degrees','142 degrees')
xlabel('Spikes')
ylabel('Probability')
xline(27)
%% Part 4B

for t=1:80
    if t<27
        correct_decision(t) = jpd(69,t)/(jpd(69,t)+jpd(71,t));
        incorrect_decision(t) = jpd(71,t)/(jpd(69,t)+jpd(71,t));
    else
        correct_decision(t) = jpd(71,t)/(jpd(69,t)+jpd(71,t));
        incorrect_decision(t) = jpd(69,t)/(jpd(71,t)+jpd(69,t));
    end
    decision(t)= correct_decision(t)/(correct_decision(t)+incorrect_decision(t));
end
mean(correct_decision)
% Percent of the time we are correct based off of a decision threshold of
% 27 between 138 and 142 degrees.

figure
plot(correct_decision)
xlabel('spikes')
ylabel('fraction correct')
%% Part 4C
figure
plot(jpd(88,:))
hold on
plot(jpd(91,:))
legend('178 degrees','181 degrees')
xlabel('Spikes')
ylabel('Probability')
xline(50)



for t=1:80
    if t<50
        correct_decision1(t) = jpd(88,t)/(jpd(88,t)+jpd(91,t));
        incorrect_decision1(t) = jpd(91,t)/(jpd(88,t)+jpd(91,t));
    else
        correct_decision1(t) = jpd(91,t)/(jpd(91,t)+jpd(88,t));
        incorrect_decision1(t) = jpd(88,t)/(jpd(88,t)+jpd(91,t));
    end
    decision(t)= correct_decision1(t)/(correct_decision1(t)+incorrect_decision1(t));
end
mean(correct_decision1)
% Percent of the time we are correct based off of a decision threshold of
% 50 between 178 and 182 degrees. The threshold became higher and the percent correct at this threshold
% is much lower that 138 and 142 degrees.

figure

plot(correct_decision1)
xlabel('spikes')
ylabel('fraction correct')
%% Part 4d

% The 140 stimuli is better encoded by the neuron tuned to 180 degrees.
% This makes sense because the responses at the peak of the tuning curve is
% less discernable than the slope of stimuli at the side of the tuning
% curve because stimuli at the side have much larger slopes and are
% therefore lss ambiguous.
    

